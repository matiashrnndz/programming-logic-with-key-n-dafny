CombSort (arr: array<int>)
  require
    N > 1    -- Propiedad de acotamiento
  ensure
    sorted_increasing(arr[..])     -- Propiedad de ordenamiento
    perm(arr[..], old(arr[..]))    -- Propiedad de integridad
  local
    N: int
    gap: int
    sorted: bool
    i: int
  do
    invariant
      gap in [1..N]                                                            -- Invariante de acotamiento
      sorted = true then forall k in [0..N-gap) then arr[k] <= arr[k + gap]    -- Invariante esencial
      perm(arr[..], old(arr[..]))                                              -- Invariante esencial
    init
      N := arr.length
      gap := N
      sorted := false
    until
      gap = 1 and sorted = true
    step
      invariant
        0 <= i < i + gap <= N                                                -- Invariante de acotamiento
        sorted = true then forall k in [0..i) then arr[k] <= arr[k + gap]    -- Invariante esencial
        prem(arr[..], old(arr[..]))                                          -- Invariante esencial
      init
        gap := NewGap(gap, N)
        sorted := true
        i := 0
      until
        i + gap = N
      step
        if arr[i] > arr[i + gap]
          then swap(i, i + gap); sorted := false;
        i := i + 1
      variant
        N - (i + gap)
      end
    variant
      if gap > 1 then gap else |inversions(arr[..])|
    end
  end
