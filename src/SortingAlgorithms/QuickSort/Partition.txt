Partition (arr: array<int>, from: int, to: int): (l: int)
  require
    0 <= from <= to < N                             -- Requerimiento de acotamiento
    from > 0 then arr[from - 1] <= arr[from..to]    -- Requerimiento personalizado
    to < N - 1 then arr[to + 1] >= arr[from..to]    -- Requerimiento personalizado
  ensure
    l in [from..to]                                 -- Propiedad de acotamiento
    arr[l] > arr[from..l)                           -- Propiedad de ordenamiento
    arr[l] <= arr(l..to]                            -- Propiedad de ordenamiento
    perm(arr[..], old(arr[..]))                     -- Propiedad de integridad
    arr[0..from) = old(arr[0..from))                -- Propiedad de integridad
    arr(to..N) = old(arr(to..N))                    -- Propiedad de integridad
    from > 0 then arr[from - 1] <= arr[from..to]    -- Propiedad personalizada
    to < N - 1 then arr[to + 1] >= arr[from..to]    -- Propiedad personalizada
  local
    N: int
    r: int
    pivot: int
  do
    invariant
      from <= l <= r <= to                            -- Invariante de acotamiento
      pivot = arr[l]
      pivot > arr[from..l)                            -- Invariante esencial
      pivot <= arr(r..to])                            -- Invariante esencial
      perm(arr[..], old(arr[..]))                     -- Invariante esencial
      arr[0..from) = old(arr[0..from))                -- Invariante esencial
      arr(to..N) = old(arr(to..N))                    -- Invariante esencial
      from > 0 then arr[from - 1] <= arr[from..to]    -- Invariante esencial
      to < N - 1 then arr[to + 1] >= arr[from..to]    -- Invariante esencial
    init
      N := arr.length
      l := from
      r := to
      pivot := arr[from]
    until
      l = r
    step
      if pivot <= arr[r]
        then r := r - 1
        else arr[l] := arr[r]; arr[r] := arr[l + 1]
             arr[l + 1] := pivot; l := l + 1
    variant
      r - l
    end
  end
