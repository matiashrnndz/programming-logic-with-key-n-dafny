BinarySearch (arr: array<int>, key: int): (m: int)
  require
    sorted_increasing(arr)    -- Requerimiento de ordenamiento
  ensure
    m = -1 then key not in arr[..]    -- Propiedad caso negativo
    0 <= m < N then key = arr[m]      -- Propiedad caso positivo
  local
    N: int
    l: int
    r: int
  do
    invariant
      0 <= l <= r <= N        -- Invariante de acotamiento
      m = (l + r) / 2
      key not in arr[0..l)    -- Invariante esencial
      key not in arr[r..N)    -- Invariante esencial
    init
      N := arr.length
      l := 0
      r := N
      m := (l + r) / 2
    until
      l = r or arr[m] = key
    step
      if key < arr[m]
        then r := m
        else l := m + 1
      m := (l + r) / 2
    variant
      r - l
    adjust
      if l = r then m := -1
    end
  end
